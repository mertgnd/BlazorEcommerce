@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0){
	<span>@message</span>
}
else
{
	<div>
		@foreach (var product in cartProducts)
		{
			<div class="container">
				<div class="image-wrapper">
					<img src="@product.ImageUrl" class="image" />
				</div>
				<div class="name">
					<h5><a href="/product/@product.ProductId">Title: @product.Title</a></h5>
					<span>Type: @product.ProductType</span><br />

					<input type="number" value="@product.Quantity"
						   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
						   class="form-control input-quantity"
						   min="1" />

					<button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
						Delete
					</button>
				</div>
				<div class="cart-product-price">$@(product.Price * product.Quantity)</div>
			</div>
		}
		<div class="cart-product-price">
			Total $(@cartProducts.Count) : $@cartProducts.Sum(product => @product.Price * product.Quantity)
		</div>
	</div>
}

@code {
	List<CartProductResponse> cartProducts = null;
	string message = "Loading cart...";

	protected override async Task OnInitializedAsync()
	{
		await LoadCart();
	}

	private async Task RemoveProductFromCart(int productId, int productTypeId)
	{
		await CartService.RemoveProductFromCart(productId, productTypeId);
		await LoadCart();
	}

	private async Task LoadCart()
	{
		if ((await CartService.GetCartItems()).Count == 0)
		{
			message = "Your cart is empty.";
			cartProducts = new List<CartProductResponse>();
		}
		else
		{
			cartProducts = await CartService.GetCartProducts();
		}
	}

	private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
	{
		Console.WriteLine($"Quantity change event triggered for product: {product.Title}");
		Console.WriteLine($"New quantity value: {e.Value}");

		product.Quantity = int.Parse(e.Value.ToString());
		if (product.Quantity < 1)
			product.Quantity = 1;

		Console.WriteLine($"Updated quantity for product {product.Title}: {product.Quantity}");

		await CartService.UpdateQuantity(product);

		var updatedCart = await CartService.GetCartItems();
		Console.WriteLine("Updated cart after quantity update:");
		foreach (var item in updatedCart)
		{
			Console.WriteLine($"Product: {item.ProductId}, Quantity: {item.Quantity}");
		}
	}
}
